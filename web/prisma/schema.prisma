generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                                  String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                                               String              @unique @db.VarChar(255)
  phone                                               String?             @unique @db.VarChar(20)
  first_name                                          String              @db.VarChar(100)
  last_name                                           String              @db.VarChar(100)
  role                                                user_role
  status                                              user_status?        @default(PENDING_VERIFICATION)
  date_of_birth                                       DateTime?           @db.Date
  address                                             String?
  city                                                String?             @db.VarChar(100)
  country                                             String?             @default("HT") @db.VarChar(2)
  language                                            String?             @default("ht") @db.VarChar(2)
  password                                            String?             @db.VarChar(255)
  pin_hash                                            String?             @db.VarChar(255)
  two_factor_enabled                                  Boolean?            @default(false)
  created_at                                          DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at                                          DateTime?           @default(now()) @db.Timestamptz(6)
  last_login_at                                       DateTime?           @db.Timestamptz(6)
  email_verified_at                                   DateTime?           @db.Timestamptz(6)
  admin_profiles                                      AdminProfile?
  audit_logs                                          AuditLog[]
  beneficiaries_beneficiaries_client_user_idTousers   Beneficiary[]       @relation("beneficiaries_client_user_idTousers")
  beneficiaries_beneficiaries_diaspora_user_idTousers Beneficiary[]       @relation("beneficiaries_diaspora_user_idTousers")
  cards_cards_issued_byTousers                        Card[]              @relation("cards_issued_byTousers")
  cards_cards_user_idTousers                          Card[]              @relation("cards_user_idTousers")
  client_profiles                                     ClientProfile?
  diaspora_profiles                                   DiasporaProfile?
  distributor_profiles                                DistributorProfile?
  merchant_profiles                                   MerchantProfile?
  notifications                                       Notification[]
  refill_requests_refill_requests_from_user_idTousers RefillRequest[]     @relation("refill_requests_from_user_idTousers")
  refill_requests_refill_requests_processed_byTousers RefillRequest[]     @relation("refill_requests_processed_byTousers")
  transactions_transactions_processed_byTousers       Transaction[]       @relation("transactions_processed_byTousers")
  transactions_transactions_receiver_idTousers        Transaction[]       @relation("transactions_receiver_idTousers")
  transactions_transactions_sender_idTousers          Transaction[]       @relation("transactions_sender_idTousers")
  user_sessions                                       UserSession[]
  wallets                                             Wallet[]

  // üîç Enhanced Security & Financial Infrastructure Relations
  kyc_verification   KYCVerification?
  kyc_reviews        KYCVerification[]  @relation("KYCReviewedBy")
  card_activities    CardActivity[]
  commission_records CommissionRecord[]
  disputes_raised    Dispute[]          @relation("DisputeRaisedBy")
  disputes_assigned  Dispute[]          @relation("DisputeAssignedTo")
  devices            Device[]
  referral_codes     ReferralCode[]
  referral_uses      ReferralUse[]
  account_recoveries AccountRecovery[]

  // üîß Operational & Support Infrastructure Relations
  support_tickets          SupportTicket[]
  support_tickets_assigned SupportTicket[]       @relation("TicketAssignedTo")
  pos_devices_merchant     POSDevice[]           @relation("POSMerchant")
  pos_devices_distributor  POSDevice[]           @relation("POSDistributor")
  card_inventories         CardInventory[]
  app_configs              AppConfig[]
  user_activity_logs       UserActivityLog[]
  push_notification_logs   PushNotificationLog[]

  @@index([country], map: "idx_users_country")
  @@index([email], map: "idx_users_email")
  @@index([phone], map: "idx_users_phone")
  @@index([role], map: "idx_users_role")
  @@index([status], map: "idx_users_status")
  @@map("users")
}

model ClientProfile {
  id                    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id               String    @unique @db.Uuid
  preferred_language    String?   @default("ht") @db.VarChar(2)
  receive_notifications Boolean?  @default(true)
  preferred_currency    String?   @default("HTG") @db.VarChar(3)
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @db.Timestamptz(6)
  users                 User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("client_profiles")
}

model MerchantProfile {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                String    @unique @db.Uuid
  business_name          String    @db.VarChar(255)
  business_type          String    @db.VarChar(100)
  business_address       String?
  business_phone         String?   @db.VarChar(20)
  tax_id                 String?   @db.VarChar(50)
  is_verified            Boolean?  @default(false)
  verified_at            DateTime? @db.Timestamptz(6)
  auto_accept_payments   Boolean?  @default(true)
  max_transaction_amount Decimal?  @default(100000) @db.Decimal(15, 2)
  created_at             DateTime? @default(now()) @db.Timestamptz(6)
  updated_at             DateTime? @default(now()) @db.Timestamptz(6)
  users                  User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("merchant_profiles")
}

model DistributorProfile {
  id                         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                    String    @unique @db.Uuid
  territory_name             String    @db.VarChar(255)
  territory_code             String    @unique @db.VarChar(20)
  region                     String    @db.VarChar(100)
  is_active                  Boolean?  @default(true)
  refill_commission_rate     Decimal?  @default(0.02) @db.Decimal(5, 4)
  withdrawal_commission_rate Decimal?  @default(0.02) @db.Decimal(5, 4)
  cards_in_stock             Int?      @default(0)
  last_restock_at            DateTime? @db.Timestamptz(6)
  created_at                 DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime? @default(now()) @db.Timestamptz(6)
  users                      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("distributor_profiles")
}

model DiasporaProfile {
  id                    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id               String    @unique @db.Uuid
  country_of_residence  String    @db.VarChar(2)
  preferred_currency    String?   @default("USD") @db.VarChar(3)
  auto_refill_enabled   Boolean?  @default(false)
  auto_refill_amount    Decimal?  @db.Decimal(15, 2)
  auto_refill_frequency String?   @db.VarChar(20)
  next_auto_refill_date DateTime? @db.Timestamptz(6)
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @db.Timestamptz(6)
  users                 User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("diaspora_profiles")
}

model AdminProfile {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String    @unique @db.Uuid
  department  String    @db.VarChar(100)
  permissions Json?     @default("[]")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  users       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("admin_profiles")
}

model Wallet {
  id                                                    String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                                               String          @db.Uuid
  currency                                              String?         @default("HTG") @db.VarChar(3)
  balance                                               Decimal?        @default(0) @db.Decimal(15, 2)
  status                                                wallet_status?  @default(ACTIVE)
  daily_limit                                           Decimal?        @default(50000) @db.Decimal(15, 2)
  monthly_limit                                         Decimal?        @default(500000) @db.Decimal(15, 2)
  created_at                                            DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at                                            DateTime?       @default(now()) @db.Timestamptz(6)
  refill_requests                                       RefillRequest[]
  transactions_transactions_receiver_wallet_idTowallets Transaction[]   @relation("transactions_receiver_wallet_idTowallets")
  transactions_transactions_sender_wallet_idTowallets   Transaction[]   @relation("transactions_sender_wallet_idTowallets")
  users                                                 User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, currency])
  @@index([currency], map: "idx_wallets_currency")
  @@index([status], map: "idx_wallets_status")
  @@index([user_id], map: "idx_wallets_user_id")
  @@map("wallets")
}

model Transaction {
  id                                               String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type                                             transaction_type
  status                                           transaction_status? @default(PENDING)
  amount                                           Decimal             @db.Decimal(15, 2)
  currency                                         String?             @default("HTG") @db.VarChar(3)
  fee                                              Decimal?            @default(0) @db.Decimal(15, 2)
  sender_id                                        String              @db.Uuid
  receiver_id                                      String              @db.Uuid
  sender_wallet_id                                 String              @db.Uuid
  receiver_wallet_id                               String              @db.Uuid
  method                                           payment_method
  reference                                        String              @unique @db.VarChar(100)
  description                                      String?
  card_id                                          String?             @db.Uuid
  stripe_payment_id                                String?             @db.VarChar(255)
  processed_at                                     DateTime?           @db.Timestamptz(6)
  processed_by                                     String?             @db.Uuid
  failure_reason                                   String?
  metadata                                         Json?
  ip_address                                       String?             @db.Inet
  user_agent                                       String?
  location                                         Json?
  created_at                                       DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at                                       DateTime?           @default(now()) @db.Timestamptz(6)
  cards                                            Card?               @relation(fields: [card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions_card_id")
  users_transactions_processed_byTousers           User?               @relation("transactions_processed_byTousers", fields: [processed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_transactions_receiver_idTousers            User                @relation("transactions_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wallets_transactions_receiver_wallet_idTowallets Wallet              @relation("transactions_receiver_wallet_idTowallets", fields: [receiver_wallet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_transactions_sender_idTousers              User                @relation("transactions_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wallets_transactions_sender_wallet_idTowallets   Wallet              @relation("transactions_sender_wallet_idTowallets", fields: [sender_wallet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // üí∞ Financial Infrastructure Relations
  commission_records CommissionRecord[] // Commission tracking
  disputes           Dispute[] // Dispute handling

  @@index([created_at], map: "idx_transactions_created_at")
  @@index([receiver_id], map: "idx_transactions_receiver_id")
  @@index([reference], map: "idx_transactions_reference")
  @@index([sender_id], map: "idx_transactions_sender_id")
  @@index([status], map: "idx_transactions_status")
  @@index([type], map: "idx_transactions_type")
  @@map("transactions")
}

model Card {
  id                           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  uid                          String         @unique @db.VarChar(50)
  type                         card_type
  status                       card_status?   @default(INACTIVE)
  user_id                      String?        @db.Uuid
  issued_by                    String         @db.Uuid
  issued_at                    DateTime       @db.Timestamptz(6)
  activated_at                 DateTime?      @db.Timestamptz(6)
  expires_at                   DateTime?      @db.Timestamptz(6)
  last_used_at                 DateTime?      @db.Timestamptz(6)
  usage_count                  Int?           @default(0)
  card_number                  String?        @unique @db.VarChar(50)
  printed_name                 String?        @db.VarChar(255)
  created_at                   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at                   DateTime?      @default(now()) @db.Timestamptz(6)
  users_cards_issued_byTousers User           @relation("cards_issued_byTousers", fields: [issued_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_cards_user_idTousers   User?          @relation("cards_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions                 Transaction[]
  activities                   CardActivity[] // Card lifecycle tracking

  @@index([status], map: "idx_cards_status")
  @@index([type], map: "idx_cards_type")
  @@index([uid], map: "idx_cards_uid")
  @@index([user_id], map: "idx_cards_user_id")
  @@map("cards")
}

model RefillRequest {
  id                                        String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  from_user_id                              String                 @db.Uuid
  to_wallet_id                              String                 @db.Uuid
  amount                                    Decimal                @db.Decimal(15, 2)
  currency                                  String?                @default("HTG") @db.VarChar(3)
  status                                    refill_request_status? @default(PENDING)
  note                                      String?
  processed_by                              String?                @db.Uuid
  processed_at                              DateTime?              @db.Timestamptz(6)
  expires_at                                DateTime?              @default(dbgenerated("(now() + '24:00:00'::interval)")) @db.Timestamptz(6)
  stripe_payment_id                         String?                @db.VarChar(255)
  payment_method                            payment_method?
  created_at                                DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at                                DateTime?              @default(now()) @db.Timestamptz(6)
  users_refill_requests_from_user_idTousers User                   @relation("refill_requests_from_user_idTousers", fields: [from_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_refill_requests_processed_byTousers User?                  @relation("refill_requests_processed_byTousers", fields: [processed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  wallets                                   Wallet                 @relation(fields: [to_wallet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // üí∞ Commission tracking for refill requests
  commission_records CommissionRecord[]

  @@index([from_user_id], map: "idx_refill_requests_from_user_id")
  @@index([status], map: "idx_refill_requests_status")
  @@index([to_wallet_id], map: "idx_refill_requests_to_wallet_id")
  @@map("refill_requests")
}

model Beneficiary {
  id                                          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  diaspora_user_id                            String    @db.Uuid
  client_user_id                              String    @db.Uuid
  nickname                                    String    @db.VarChar(100)
  relationship                                String    @db.VarChar(100)
  is_verified                                 Boolean?  @default(false)
  auto_refill_enabled                         Boolean?  @default(false)
  auto_refill_amount                          Decimal?  @db.Decimal(15, 2)
  auto_refill_frequency                       String?   @db.VarChar(20)
  next_auto_refill_date                       DateTime? @db.Timestamptz(6)
  created_at                                  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                                  DateTime? @default(now()) @db.Timestamptz(6)
  users_beneficiaries_client_user_idTousers   User      @relation("beneficiaries_client_user_idTousers", fields: [client_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_beneficiaries_diaspora_user_idTousers User      @relation("beneficiaries_diaspora_user_idTousers", fields: [diaspora_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([diaspora_user_id, client_user_id])
  @@index([client_user_id], map: "idx_beneficiaries_client_user_id")
  @@index([diaspora_user_id], map: "idx_beneficiaries_diaspora_user_id")
  @@map("beneficiaries")
}

model UserSession {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String    @db.Uuid
  token       String    @unique @db.VarChar(500)
  device_info Json?
  ip_address  String    @db.Inet
  user_agent  String?
  is_active   Boolean?  @default(true)
  expires_at  DateTime  @db.Timestamptz(6)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  users       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expires_at], map: "idx_user_sessions_expires_at")
  @@index([token], map: "idx_user_sessions_token")
  @@index([user_id], map: "idx_user_sessions_user_id")
  @@map("user_sessions")
}

model AuditLog {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String?      @db.Uuid
  action      audit_action
  resource    String       @db.VarChar(100)
  resource_id String?      @db.Uuid
  old_values  Json?
  new_values  Json?
  ip_address  String       @db.Inet
  user_agent  String?
  metadata    Json?
  created_at  DateTime?    @default(now()) @db.Timestamptz(6)
  users       User?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([action], map: "idx_audit_logs_action")
  @@index([created_at], map: "idx_audit_logs_created_at")
  @@index([resource], map: "idx_audit_logs_resource")
  @@index([user_id], map: "idx_audit_logs_user_id")
  @@map("audit_logs")
}

model SystemConfig {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key         String    @unique @db.VarChar(255)
  value       Json
  description String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@map("system_config")
}

model ExchangeRate {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  from_currency String    @db.VarChar(3)
  to_currency   String    @db.VarChar(3)
  rate          Decimal   @db.Decimal(15, 8)
  source        String?   @default("manual") @db.VarChar(50)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([from_currency, to_currency, created_at])
  @@index([created_at], map: "idx_exchange_rates_created_at")
  @@index([from_currency, to_currency], map: "idx_exchange_rates_currencies")
  @@map("exchange_rates")
}

model Notification {
  id           String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String?              @db.Uuid
  type         notification_type
  status       notification_status? @default(PENDING)
  title        String               @db.VarChar(255)
  message      String
  data         Json?
  channels     String[]             @default(["in_app"])
  sent_at      DateTime?            @db.Timestamptz(6)
  delivered_at DateTime?            @db.Timestamptz(6)
  read_at      DateTime?            @db.Timestamptz(6)
  created_at   DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?            @default(now()) @db.Timestamptz(6)
  users        User?                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "idx_notifications_created_at")
  @@index([status], map: "idx_notifications_status")
  @@index([type], map: "idx_notifications_type")
  @@index([user_id], map: "idx_notifications_user_id")
  @@map("notifications")
}

// üîç KYC (Know Your Customer) Verification
model KYCVerification {
  id                String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id           String            @unique @db.Uuid
  document_type     kyc_document_type
  document_number   String?           @db.VarChar(100)
  document_url      String?           @db.VarChar(500) // Supabase Storage URL
  selfie_url        String?           @db.VarChar(500) // Verification selfie
  status            kyc_status        @default(PENDING)
  rejection_reason  String?
  reviewed_by       String?           @db.Uuid
  reviewed_at       DateTime?         @db.Timestamptz(6)
  expires_at        DateTime?         @db.Timestamptz(6) // Document expiry
  verification_data Json? // Additional verification metadata
  created_at        DateTime          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime          @default(now()) @db.Timestamptz(6)

  user             User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  reviewed_by_user User? @relation("KYCReviewedBy", fields: [reviewed_by], references: [id])

  @@index([status], map: "idx_kyc_status")
  @@index([document_type], map: "idx_kyc_document_type")
  @@index([created_at], map: "idx_kyc_created_at")
  @@map("kyc_verifications")
}

// üí≥ Card Activity & Lifecycle Tracking
model CardActivity {
  id            String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  card_id       String             @db.Uuid
  activity_type card_activity_type
  old_status    card_status?
  new_status    card_status?
  performed_by  String?            @db.Uuid // Admin/Distributor who performed action
  reason        String? // Reason for status change
  location      Json? // GPS coordinates if applicable
  metadata      Json? // Additional activity data
  created_at    DateTime           @default(now()) @db.Timestamptz(6)

  card              Card  @relation(fields: [card_id], references: [id], onDelete: Cascade)
  performed_by_user User? @relation(fields: [performed_by], references: [id])

  @@index([card_id], map: "idx_card_activity_card_id")
  @@index([activity_type], map: "idx_card_activity_type")
  @@index([created_at], map: "idx_card_activity_created_at")
  @@map("card_activities")
}

// üí∞ Commission & Profit Tracking
model CommissionRecord {
  id                String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  actor_id          String          @db.Uuid // Merchant or Distributor ID
  actor_role        commission_role // MERCHANT | DISTRIBUTOR
  transaction_id    String?         @db.Uuid // Related transaction
  refill_request_id String?         @db.Uuid // Related refill request
  commission_type   commission_type // TRANSACTION_FEE | REFILL_FEE | CARD_SALE
  base_amount       Decimal         @db.Decimal(15, 2) // Original transaction amount
  commission_rate   Decimal         @db.Decimal(5, 4) // Rate applied (e.g., 0.0250 = 2.5%)
  commission_amount Decimal         @db.Decimal(15, 2) // Calculated commission
  currency          String          @default("HTG") @db.VarChar(3)
  paid_out          Boolean         @default(false)
  paid_out_at       DateTime?       @db.Timestamptz(6)
  payment_reference String?         @db.VarChar(100) // Payout transaction reference
  created_at        DateTime        @default(now()) @db.Timestamptz(6)

  actor          User           @relation(fields: [actor_id], references: [id])
  transaction    Transaction?   @relation(fields: [transaction_id], references: [id])
  refill_request RefillRequest? @relation(fields: [refill_request_id], references: [id])

  @@index([actor_id], map: "idx_commission_actor_id")
  @@index([actor_role], map: "idx_commission_actor_role")
  @@index([paid_out], map: "idx_commission_paid_out")
  @@index([created_at], map: "idx_commission_created_at")
  @@map("commission_records")
}

// üõ°Ô∏è Dispute & Chargeback Handling
model Dispute {
  id                String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  transaction_id    String         @db.Uuid
  raised_by_id      String         @db.Uuid
  dispute_type      dispute_type // UNAUTHORIZED | CARD_NOT_PRESENT | FRAUD | OTHER
  status            dispute_status @default(PENDING)
  reason            String // User-provided reason
  description       String? // Detailed description
  evidence_urls     String[]       @default([]) // Supporting documents
  assigned_to       String?        @db.Uuid // Support agent
  resolution_note   String? // Final resolution explanation
  resolution_amount Decimal?       @db.Decimal(15, 2) // Refund amount if any
  resolved_at       DateTime?      @db.Timestamptz(6)
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime       @default(now()) @db.Timestamptz(6)

  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  raised_by      User        @relation("DisputeRaisedBy", fields: [raised_by_id], references: [id])
  assigned_agent User?       @relation("DisputeAssignedTo", fields: [assigned_to], references: [id])

  @@index([status], map: "idx_dispute_status")
  @@index([raised_by_id], map: "idx_dispute_raised_by")
  @@index([created_at], map: "idx_dispute_created_at")
  @@map("disputes")
}

// üì± Device & POS Binding for Security
model Device {
  id             String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  merchant_id    String      @db.Uuid
  device_id      String      @unique @db.VarChar(100) // IMEI, Serial, or UUID
  device_type    device_type // ANDROID_POS | IOS_POS | WEB_TERMINAL
  device_name    String?     @db.VarChar(100) // User-friendly name
  device_model   String?     @db.VarChar(100) // Manufacturer model
  os_version     String?     @db.VarChar(50) // Operating system version
  app_version    String?     @db.VarChar(50) // KobKlein app version
  is_active      Boolean     @default(true)
  last_seen_at   DateTime?   @db.Timestamptz(6)
  location       Json? // Last known GPS coordinates
  registered_at  DateTime    @default(now()) @db.Timestamptz(6)
  deactivated_at DateTime?   @db.Timestamptz(6)

  merchant        User            @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
  device_sessions DeviceSession[]

  @@index([merchant_id], map: "idx_device_merchant_id")
  @@index([device_id], map: "idx_device_device_id")
  @@index([is_active], map: "idx_device_is_active")
  @@map("devices")
}

// üìä Device Session Tracking
model DeviceSession {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  device_id  String    @db.Uuid
  started_at DateTime  @default(now()) @db.Timestamptz(6)
  ended_at   DateTime? @db.Timestamptz(6)
  ip_address String    @db.Inet
  location   Json? // GPS coordinates
  user_agent String?
  is_active  Boolean   @default(true)

  device Device @relation(fields: [device_id], references: [id], onDelete: Cascade)

  @@index([device_id], map: "idx_device_session_device_id")
  @@index([started_at], map: "idx_device_session_started_at")
  @@map("device_sessions")
}

// üéÅ Referral Code System for Growth
model ReferralCode {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code          String    @unique @db.VarChar(20)
  created_by    String    @db.Uuid
  target_role   user_role // Which role this code targets
  reward_amount Decimal?  @db.Decimal(15, 2) // Bonus for successful referral
  usage_limit   Int?      @default(1) // How many times it can be used
  usage_count   Int       @default(0)
  expires_at    DateTime? @db.Timestamptz(6)
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)

  created_by_user User          @relation(fields: [created_by], references: [id])
  referral_uses   ReferralUse[]

  @@index([code], map: "idx_referral_code_code")
  @@index([target_role], map: "idx_referral_code_target_role")
  @@index([is_active], map: "idx_referral_code_is_active")
  @@map("referral_codes")
}

// üìà Referral Usage Tracking
model ReferralUse {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  referral_code_id String   @db.Uuid
  used_by          String   @db.Uuid // New user who used the code
  reward_given     Boolean  @default(false)
  reward_amount    Decimal? @db.Decimal(15, 2)
  used_at          DateTime @default(now()) @db.Timestamptz(6)

  referral_code ReferralCode @relation(fields: [referral_code_id], references: [id])
  user          User         @relation(fields: [used_by], references: [id])

  @@index([referral_code_id], map: "idx_referral_use_code_id")
  @@index([used_by], map: "idx_referral_use_used_by")
  @@map("referral_uses")
}

// üåç Multi-Currency Support
model Currency {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code           String   @unique @db.VarChar(3) // 'HTG', 'USD', 'EUR'
  name           String   @db.VarChar(100) // 'Haitian Gourde'
  symbol         String   @db.VarChar(10) // 'G', '$', '‚Ç¨'
  rate_to_htg    Decimal  @db.Decimal(15, 8) // Exchange rate to HTG base
  is_default     Boolean  @default(false) // Is this the system default?
  is_active      Boolean  @default(true) // Can be used for transactions?
  decimal_places Int      @default(2) // Number of decimal places
  updated_at     DateTime @default(now()) @db.Timestamptz(6)
  created_at     DateTime @default(now()) @db.Timestamptz(6)

  @@index([code], map: "idx_currency_code")
  @@index([is_active], map: "idx_currency_is_active")
  @@map("currencies")
}

// üîê Account Recovery Attempts
model AccountRecovery {
  id                String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email_or_phone    String          @db.VarChar(255) // User's identifier
  recovery_method   recovery_method // OTP | VERIFICATION_QUESTIONS | MANUAL
  status            recovery_status @default(PENDING)
  verification_code String?         @db.VarChar(10) // OTP code
  verification_data Json? // Answers to security questions
  attempts_count    Int             @default(0)
  max_attempts      Int             @default(3)
  ip_address        String          @db.Inet
  user_agent        String?
  case_id           String?         @unique @db.VarChar(10) // For manual recovery
  assigned_to       String?         @db.Uuid // Support agent
  resolved_at       DateTime?       @db.Timestamptz(6)
  expires_at        DateTime        @db.Timestamptz(6)
  created_at        DateTime        @default(now()) @db.Timestamptz(6)

  assigned_agent User? @relation(fields: [assigned_to], references: [id])

  @@index([email_or_phone], map: "idx_recovery_email_phone")
  @@index([status], map: "idx_recovery_status")
  @@index([case_id], map: "idx_recovery_case_id")
  @@index([created_at], map: "idx_recovery_created_at")
  @@map("account_recoveries")
}

// üé´ Support Ticket System for Customer Service
model SupportTicket {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ticket_number     String              @unique @db.VarChar(20) // Auto-generated: TKT-20241201-001
  user_id           String              @db.Uuid
  type              support_ticket_type // TECHNICAL | DISPUTE | CARD_ISSUE | ACCOUNT | PAYMENT
  priority          support_priority    @default(MEDIUM) // LOW | MEDIUM | HIGH | URGENT
  status            support_status      @default(OPEN) // OPEN | IN_PROGRESS | WAITING_USER | RESOLVED | CLOSED
  subject           String              @db.VarChar(255)
  description       String // Detailed issue description
  attachments       String[]            @default([]) // URLs to uploaded files
  assigned_to       String?             @db.Uuid // Support agent ID
  resolution        String? // Final resolution details
  customer_rating   Int? // 1-5 star rating
  customer_feedback String? // Post-resolution feedback
  resolved_at       DateTime?           @db.Timestamptz(6)
  closed_at         DateTime?           @db.Timestamptz(6)
  last_response_at  DateTime?           @db.Timestamptz(6)
  response_due_at   DateTime?           @db.Timestamptz(6) // SLA deadline
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  updated_at        DateTime            @default(now()) @db.Timestamptz(6)

  user           User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  assigned_agent User? @relation("TicketAssignedTo", fields: [assigned_to], references: [id])

  @@index([status], map: "idx_support_ticket_status")
  @@index([type], map: "idx_support_ticket_type")
  @@index([priority], map: "idx_support_ticket_priority")
  @@index([user_id], map: "idx_support_ticket_user_id")
  @@index([assigned_to], map: "idx_support_ticket_assigned_to")
  @@index([created_at], map: "idx_support_ticket_created_at")
  @@map("support_tickets")
}

// üì± POS Device Management & Tracking
model POSDevice {
  id                  String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  serial_number       String            @unique @db.VarChar(50)
  model               String            @db.VarChar(100) // 'KobKlein-POS-V2'
  firmware_version    String            @db.VarChar(20) // '2.1.4'
  merchant_id         String?           @db.Uuid // Assigned merchant
  distributor_id      String            @db.Uuid // Responsible distributor
  status              pos_device_status @default(IN_STOCK) // IN_STOCK | ASSIGNED | ACTIVE | INACTIVE | DEFECTIVE
  location            Json? // GPS coordinates
  last_checkin_at     DateTime?         @db.Timestamptz(6) // Last heartbeat
  last_transaction_at DateTime?         @db.Timestamptz(6) // Last successful transaction
  total_transactions  Int               @default(0) // Lifetime transaction count
  total_amount        Decimal           @default(0) @db.Decimal(15, 2) // Lifetime processed amount
  assigned_at         DateTime?         @db.Timestamptz(6)
  warranty_expires_at DateTime?         @db.Timestamptz(6)
  created_at          DateTime          @default(now()) @db.Timestamptz(6)
  updated_at          DateTime          @default(now()) @db.Timestamptz(6)

  merchant    User? @relation("POSMerchant", fields: [merchant_id], references: [id])
  distributor User  @relation("POSDistributor", fields: [distributor_id], references: [id])

  @@index([serial_number], map: "idx_pos_device_serial")
  @@index([status], map: "idx_pos_device_status")
  @@index([merchant_id], map: "idx_pos_device_merchant_id")
  @@index([distributor_id], map: "idx_pos_device_distributor_id")
  @@index([last_checkin_at], map: "idx_pos_device_last_checkin")
  @@map("pos_devices")
}

// üí≥ Card Inventory & Batch Management
model CardInventory {
  id                   String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  batch_id             String            @unique @db.VarChar(30) // BATCH-HTG-20241201-001
  distributor_id       String            @db.Uuid
  card_type            card_type // NFC | VIRTUAL
  quantity_ordered     Int // How many were ordered
  quantity_received    Int? // How many actually arrived
  quantity_distributed Int               @default(0) // How many given to merchants
  quantity_remaining   Int // Current stock level
  unit_cost            Decimal           @db.Decimal(10, 2) // Cost per card
  total_cost           Decimal           @db.Decimal(15, 2) // Total batch cost
  supplier             String?           @db.VarChar(200) // Card manufacturer
  batch_status         card_batch_status @default(ORDERED) // ORDERED | SHIPPED | RECEIVED | DISTRIBUTED
  ordered_at           DateTime          @default(now()) @db.Timestamptz(6)
  shipped_at           DateTime?         @db.Timestamptz(6)
  received_at          DateTime?         @db.Timestamptz(6)
  expiry_date          DateTime?         @db.Date // When cards expire
  notes                String? // Additional batch notes
  created_at           DateTime          @default(now()) @db.Timestamptz(6)
  updated_at           DateTime          @default(now()) @db.Timestamptz(6)

  distributor User @relation(fields: [distributor_id], references: [id])

  @@index([batch_id], map: "idx_card_inventory_batch_id")
  @@index([distributor_id], map: "idx_card_inventory_distributor_id")
  @@index([batch_status], map: "idx_card_inventory_status")
  @@index([ordered_at], map: "idx_card_inventory_ordered_at")
  @@map("card_inventories")
}

// ‚öôÔ∏è Application Configuration Management
model AppConfig {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key         String      @unique @db.VarChar(100) // 'min_refill_amount', 'max_daily_limit'
  value       String      @db.Text // JSON string or plain value
  description String?     @db.VarChar(500) // Human-readable description
  category    String?     @db.VarChar(50) // 'financial', 'security', 'ui'
  data_type   config_type @default(STRING) // STRING | NUMBER | BOOLEAN | JSON
  is_public   Boolean     @default(false) // Can be accessed by frontend?
  updated_by  String      @db.Uuid // Admin who last updated
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  updated_at  DateTime    @default(now()) @db.Timestamptz(6)

  updated_by_user User @relation(fields: [updated_by], references: [id])

  @@index([key], map: "idx_app_config_key")
  @@index([category], map: "idx_app_config_category")
  @@index([is_public], map: "idx_app_config_is_public")
  @@map("app_configs")
}

// üìä User Activity Audit Log (Enhanced)
model UserActivityLog {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String             @db.Uuid
  activity_type    user_activity_type // LOGIN | LOGOUT | TRANSACTION | REFILL | KYC_ATTEMPT
  activity_details Json? // Activity-specific data
  ip_address       String             @db.Inet
  user_agent       String?
  device_info      Json? // Device fingerprint data
  location         Json? // GPS coordinates if available
  session_id       String?            @db.Uuid
  result           activity_result // SUCCESS | FAILED | BLOCKED
  risk_score       Decimal?           @db.Decimal(3, 2) // 0.00-1.00 fraud risk score
  created_at       DateTime           @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "idx_user_activity_user_id")
  @@index([activity_type], map: "idx_user_activity_type")
  @@index([result], map: "idx_user_activity_result")
  @@index([created_at], map: "idx_user_activity_created_at")
  @@index([risk_score], map: "idx_user_activity_risk_score")
  @@map("user_activity_logs")
}

// üì≤ Push Notification & Communication Log
model PushNotificationLog {
  id                String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id           String               @db.Uuid
  notification_type notification_type // TRANSACTION | SECURITY | MARKETING | SYSTEM
  channel           notification_channel // PUSH | EMAIL | SMS | IN_APP
  title             String               @db.VarChar(255)
  message           String               @db.Text
  delivery_status   delivery_status      @default(PENDING) // PENDING | SENT | DELIVERED | FAILED | BOUNCED
  provider          String?              @db.VarChar(50) // 'firebase', 'sendgrid', 'twilio'
  provider_id       String?              @db.VarChar(100) // External provider message ID
  error_message     String? // Error details if failed
  delivered_at      DateTime?            @db.Timestamptz(6)
  opened_at         DateTime?            @db.Timestamptz(6) // When user opened notification
  clicked_at        DateTime?            @db.Timestamptz(6) // When user clicked CTA
  metadata          Json? // Provider-specific data
  created_at        DateTime             @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "idx_push_notification_user_id")
  @@index([delivery_status], map: "idx_push_notification_status")
  @@index([channel], map: "idx_push_notification_channel")
  @@index([created_at], map: "idx_push_notification_created_at")
  @@map("push_notification_logs")
}

// ========================== ENUMS ==========================

enum audit_action {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  TRANSACTION
  ADMIN_ACTION
}

enum card_status {
  INACTIVE
  ACTIVE
  BLOCKED
  EXPIRED
  LOST
  STOLEN
}

enum card_type {
  CLIENT
  MERCHANT
  DISTRIBUTOR
}

enum notification_status {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum notification_type {
  TRANSACTION
  REFILL
  SECURITY
  SYSTEM
  MARKETING
}

enum payment_method {
  NFC
  QR_CODE
  CARD
  BANK_TRANSFER
  CASH
  APPLE_PAY
  GOOGLE_PAY
}

enum refill_request_status {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  EXPIRED
}

enum transaction_status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REVERSED
}

enum transaction_type {
  SEND
  RECEIVE
  REFILL
  WITHDRAW
  PAYMENT
  COMMISSION
  FEE
  EXCHANGE
}

enum user_role {
  CLIENT
  MERCHANT
  DISTRIBUTOR
  DIASPORA
  ADMIN
  SUPER_ADMIN
  REGIONAL_MANAGER
  SUPPORT_AGENT
}

enum user_status {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
  PENDING_VERIFICATION
}

enum wallet_status {
  ACTIVE
  FROZEN
  SUSPENDED
}

// üîê KYC Document Types
enum kyc_document_type {
  NATIONAL_ID
  PASSPORT
  DRIVERS_LICENSE
  BIRTH_CERTIFICATE
  UTILITY_BILL
}

// üîê KYC Verification Status
enum kyc_status {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
  RESUBMISSION_REQUIRED
}

// üí≥ Card Activity Types
enum card_activity_type {
  ISSUED
  ACTIVATED
  BLOCKED
  UNBLOCKED
  REPORTED_LOST
  REPORTED_STOLEN
  EXPIRED
  DESTROYED
  REISSUED
}

// üí∞ Commission Actor Roles
enum commission_role {
  MERCHANT
  DISTRIBUTOR
  REGIONAL_MANAGER
}

// üí∞ Commission Types
enum commission_type {
  TRANSACTION_FEE
  REFILL_FEE
  CARD_SALE
  MONTHLY_BONUS
  REFERRAL_BONUS
}

// üõ°Ô∏è Dispute Types
enum dispute_type {
  UNAUTHORIZED_TRANSACTION
  CARD_NOT_PRESENT
  SUSPECTED_FRAUD
  BILLING_ERROR
  PRODUCT_NOT_RECEIVED
  OTHER
}

// üõ°Ô∏è Dispute Status
enum dispute_status {
  PENDING
  UNDER_INVESTIGATION
  ESCALATED
  RESOLVED_FAVOR_CUSTOMER
  RESOLVED_FAVOR_MERCHANT
  CLOSED
}

// üì± Device Types
enum device_type {
  ANDROID_POS
  IOS_POS
  WEB_TERMINAL
  MOBILE_APP
  KIOSK
}

// üîê Account Recovery Methods
enum recovery_method {
  OTP_SMS
  OTP_EMAIL
  VERIFICATION_QUESTIONS
  MANUAL_REVIEW
  BIOMETRIC
}

// üîê Account Recovery Status
enum recovery_status {
  PENDING
  CODE_SENT
  VERIFIED
  FAILED
  EXPIRED
  ESCALATED
  RESOLVED
}

// üé´ Support Ticket System Enums
enum support_ticket_type {
  TECHNICAL
  DISPUTE
  CARD_ISSUE
  ACCOUNT
  PAYMENT
  FRAUD_REPORT
  BILLING
  OTHER
}

enum support_priority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum support_status {
  OPEN
  IN_PROGRESS
  WAITING_USER
  ESCALATED
  RESOLVED
  CLOSED
}

// üì± POS Device Management Enums
enum pos_device_status {
  IN_STOCK
  ASSIGNED
  ACTIVE
  INACTIVE
  MAINTENANCE
  DEFECTIVE
  RECALLED
}

// üí≥ Card Inventory Management Enums
enum card_batch_status {
  ORDERED
  SHIPPED
  IN_TRANSIT
  RECEIVED
  DISTRIBUTED
  CANCELLED
}

// ‚öôÔ∏è App Configuration Enums
enum config_type {
  STRING
  NUMBER
  BOOLEAN
  JSON
  ARRAY
}

// üìä User Activity Types
enum user_activity_type {
  LOGIN
  LOGOUT
  TRANSACTION_SEND
  TRANSACTION_RECEIVE
  REFILL_REQUEST
  REFILL_COMPLETE
  KYC_ATTEMPT
  KYC_APPROVAL
  PASSWORD_CHANGE
  PIN_CHANGE
  DEVICE_REGISTER
  CARD_ACTIVATION
  DISPUTE_RAISED
  SUPPORT_TICKET
  ACCOUNT_RECOVERY
}

// üìä Activity Results
enum activity_result {
  SUCCESS
  FAILED
  BLOCKED
  CANCELLED
  TIMEOUT
  FRAUD_DETECTED
}

// üì≤ Notification Channels
enum notification_channel {
  PUSH
  EMAIL
  SMS
  IN_APP
  WHATSAPP
}

// üì≤ Delivery Status
enum delivery_status {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
  OPENED
  CLICKED
}
